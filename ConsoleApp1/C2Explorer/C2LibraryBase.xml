<?xml version="1.0"?>
<doc>
    <assembly>
        <name>C2LibraryBase</name>
    </assembly>
    <members>
        <member name="T:C2LibraryBase.Implementation.C2RuntimeException">
            <summary>
            Exception generated by running query. 
            </summary>
            <remarks>For example: "Strategy not found" Text = ": 1234567" </remarks>
            <exclude/>
        </member>
        <member name="P:C2LibraryBase.Implementation.C2RuntimeException.Id">
            <summary>
            Gets or sets the error identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:C2LibraryBase.Implementation.C2RuntimeException.I18nMessageId">
            <summary>
            i18n identifier fot translation on the JavaScript side.
            </summary>
            <value>
            The i18n message identifier.
            </value>
        </member>
        <member name="P:C2LibraryBase.Implementation.C2RuntimeException.AdditionalText">
            <summary>
            Additional text to be appended to the translated message.
            </summary>
            <value>
            The additional text.
            </value>
        </member>
        <member name="M:C2LibraryBase.Implementation.C2RuntimeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C2LibraryBase.Implementation.C2RuntimeException" /> class.
            </summary>
            <param name="message">An English message text that describes the error.</param>
        </member>
        <member name="P:C2LibraryBase.Implementation.C2XmlHours.c2hoursxmlSymbolCurrentStatusNextStatusChange.ChangeTo">
            <summary>
            <changeTo>closed</changeTo>
            </summary>
        </member>
        <member name="P:C2LibraryBase.Implementation.C2XmlHours.XmlHoursData.Exchange">
            <summary>
            <exchange>XTSE</exchange>
            </summary>
        </member>
        <member name="P:C2LibraryBase.Implementation.C2XmlHours.XmlHoursData.C2Exchange">
            <summary>
            <c2exchange>TSX</c2exchange>
            </summary>
        </member>
        <member name="P:C2LibraryBase.Implementation.C2XmlHours.XmlHoursData.Currency">
            <summary>
            <currency>CAD</currency>
            </summary>
        </member>
        <member name="P:C2LibraryBase.Implementation.C2XmlHours.XmlHoursData.Description">
            <summary>
            London Stock Exchange Stocks
            </summary>
        </member>
        <member name="T:C2LibraryBase.Implementation.C2HistoryConnector">
            <summary>
            This class works with CQG and Crypto historical data connectors 
            </summary>
        </member>
        <member name="M:C2LibraryBase.Implementation.C2HistoryConnector.GetLastQuote(System.String,System.Int32,System.Int32,System.String,C2LibraryBase.Enumeration.enumInstruments)">
            <summary>
            GetLastQuote
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <param name="localport"></param>
            <param name="symbol"></param>
            <param name="instrument"></param>
            <returns></returns>
        </member>
        <member name="M:C2LibraryBase.Implementation.C2HistoryConnector.GetFundamentalData(System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            GetFundamentalData
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="localport"></param>
            <param name="symbol"></param>
            <param name="instrument"></param>
            <returns></returns>
        </member>
        <member name="M:C2LibraryBase.Implementation.IqFeedConnector.GetLastQuote(System.String,System.Int32,System.Int32,System.String,C2LibraryBase.Enumeration.enumInstruments)">
            <summary>
            GetLastQuote
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <param name="localport"></param>
            <param name="symbol"></param>
            <param name="instrument"></param>
            <returns></returns>
        </member>
        <member name="M:C2LibraryBase.Implementation.IqFeedConnector.GetFundamentalData(System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            GetFundamentalData
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="localport"></param>
            <param name="symbol"></param>
            <param name="instrument"></param>
            <returns></returns>
        </member>
        <member name="P:C2LibraryBase.Implementation.OHLC.Open">
            <inheritdoc/>
        </member>
        <member name="P:C2LibraryBase.Implementation.OHLC.High">
            <inheritdoc/>
        </member>
        <member name="P:C2LibraryBase.Implementation.OHLC.Low">
            <inheritdoc/>
        </member>
        <member name="P:C2LibraryBase.Implementation.OHLC.Close">
            <inheritdoc/>
        </member>
        <member name="P:C2LibraryBase.Implementation.OHLC.Volume">
            <inheritdoc/>
        </member>
        <member name="P:C2LibraryBase.Implementation.OHLCObject.DateTime">
            <inheritdoc/>
        </member>
        <member name="T:C2LibraryBase.Implementation.OperationResult">
            <summary>
            Data contracts ancestor. All data results include fields from this ancestor.
            </summary>
        </member>
        <member name="P:C2LibraryBase.Implementation.OperationResult.Status">
            <summary>
            Overall operation status.
            </summary>
            <value>
            Values: "ok" or "error"
            </value>
        </member>
        <member name="P:C2LibraryBase.Implementation.OperationResult.ErrorText">
            <summary>
            Error text when the status returned by operation is "error". An empty string otherwise.
            </summary>
            <value>Empty or an error text.</value>
        </member>
        <member name="T:C2LibraryBase.Implementation.TimeSeriesPointDecimal">
            <summary>
            This class implements ITimeSeriesPoint.
            </summary>
        </member>
        <member name="P:C2LibraryBase.Implementation.TimeSeriesPointDecimal.DateTime">
            <summary>
            Gets or sets the date and time.
            </summary>
            <value>
            The date and time.
            </value>
        </member>
        <member name="P:C2LibraryBase.Implementation.TimeSeriesPointDecimal.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:C2LibraryBase.Implementation.UpdateOHLCDatabaseSymbolResult">
            <summary>
            Update one symbol
            </summary>
            <seealso cref="!:MarketDataRepository.OperationResult" />
        </member>
        <member name="T:C2LibraryBase.Implementation.UpdateOneMinuteDatabaseSymbolsResult">
            <summary>
            Update a list of symbols.
            </summary>
            <seealso cref="!:MarketDataRepository.OperationResult" />
        </member>
        <member name="M:C2LibraryBase.Implementation.DateTimeUtils.GetAllBars(System.DateTime,System.DateTime,C2LibraryBase.Enumeration.Periodicity,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Generates all bars.
            includeHolidays: R side uses SPY or SP500 index as a referential symbol. It means holidays are excluded there.
            </summary>
            <param name="firstDate">The first date.</param>
            <param name="lastDate">The last date.</param>
            <param name="periodicity">The periodicity.</param>
            <param name="excludeHolidays">if set to <c>true</c> [include holidays].</param>
            <returns></returns>
        </member>
        <member name="M:C2LibraryBase.Implementation.DateTimeUtils.SubDayBars(Deedle.Series{System.DateTime,System.Int32},C2LibraryBase.Enumeration.Periodicity,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Subday bars.
            </summary>
            <param name="dateTimeSeries">The daily series.</param>
            <param name="periodicity">The periodicity.</param>
            <returns></returns>
        </member>
        <member name="M:C2LibraryBase.Implementation.DateTimeUtils.CalculateDays(System.DateTime,System.DateTime,System.Collections.Generic.Dictionary{System.DateTime,System.DateTime})">
            <summary>
            Calculates the no of working days in between the given two days
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns>No of days</returns>
        </member>
        <member name="M:C2LibraryBase.Implementation.DateTimeUtils.numberOfMinutes(C2LibraryBase.Enumeration.Periodicity,System.Int32)">
            <summary>
            Only for SUB-DAILY periods. 
            Returns number of minutes represented by periodicity and backTesterSettings$Range parameter.
            </summary>
            <param name="periodicity">The periodicity.</param>
            <param name="rangeLastBars">The range last bars.</param>
            <returns></returns>
        </member>
        <member name="F:C2LibraryBase.Implementation.Globals.StatusOK">
            <summary>
            This value means that a result returned by a function is ok.
            </summary>
            <value>"ok"</value>
        </member>
        <member name="F:C2LibraryBase.Implementation.Globals.StatusError">
            <summary>
            This value means that a result returned by a function is an error.
            </summary>
            <value>"error"</value>
            <remarks>Use <see cref="T:C2LibraryBase.Implementation.OperationResult"/>.<see cref="P:C2LibraryBase.Implementation.OperationResult.ErrorText"/> returned by a function to learn what is wrong.</remarks>
        </member>
        <member name="F:C2LibraryBase.Implementation.Globals.ACTION_BACKTEST">
            <summary>
            The Backtest action produces a list of trades, statistics and charts.
            </summary>
            <remarks>
            See <a href="https://www.amibroker.com/guide/w_analysis.html">https://www.amibroker.com/guide/w_analysis.html</a>
            and <a href="https://www.amibroker.com/guide/h_backtest.html">https://www.amibroker.com/guide/h_backtest.html</a>
            </remarks>
            <value>ACTION_BACKTEST = 1</value>
        </member>
        <member name="F:C2LibraryBase.Implementation.Globals.ACTION_SCAN">
            <summary>
            The Scan action produces a list of trading signals (Buy/Sell/Short/Cover).
            </summary>
            <remarks>
            See <a href="https://www.amibroker.com/guide/w_analysis.html">https://www.amibroker.com/guide/w_analysis.html</a>
            </remarks>
            <value>ACTION_SCAN = 2</value>
        </member>
        <member name="F:C2LibraryBase.Implementation.Globals.ACTION_EXPLORATION">
            <summary>
            The Explore action produces a list of custom values defined by custom rules.
            </summary>
            <remarks>
            See <a href="https://www.amibroker.com/guide/w_analysis.html">https://www.amibroker.com/guide/w_analysis.html</a>
            and <a href="https://www.amibroker.com/guide/h_exploration.html">https://www.amibroker.com/guide/h_exploration.html</a>
            </remarks>
            <value>ACTION_EXPLORATION = 3</value>
        </member>
        <member name="F:C2LibraryBase.Implementation.Globals.R_DONE_OK">
            <summary>
            R server ended an operation with success. 
            </summary>
            <value>R_DONE_OK = 0</value>
        </member>
        <member name="F:C2LibraryBase.Implementation.Globals.R_RUNNING">
            <summary>
            R server is still working on the operation.
            </summary>
            <value>R_RUNNING = 1</value>
        </member>
        <member name="F:C2LibraryBase.Implementation.Globals.R_DONE_WARNING">
            <summary>
            R server ended an operation with warning.
            </summary>
            <value>R_DONE_WARNING = 2</value>
        </member>
        <member name="F:C2LibraryBase.Implementation.Globals.R_DONE_ERROR">
            <summary>
            R server ended an operation with error.  
            </summary>
            <value>R_DONE_ERROR = 3</value>
        </member>
        <member name="F:C2LibraryBase.Implementation.Globals.R_STATUS_UNKNOWN">
            <summary>
            R server is working on the operation, but the status is unclear. (It is time to check a timeout.)
            </summary>
            <value>R_STATUS_UNKNOWN = 4</value>
        </member>
        <member name="T:C2LibraryBase.Implementation.HLKey">
            <summary>
            A key for equity series constructed from the High and Low values of the same day (bar).
            We need a subkey which differentiates DateTime so that we can include both High and Low values to the Series,
            which must have unique key.
            </summary>
        </member>
        <member name="T:C2LibraryBase.Implementation.HTTPOperationResult">
            <summary>
            Data contracts ancestor. All data results include fields from this ancestor.
            </summary>
        </member>
        <member name="P:C2LibraryBase.Implementation.HTTPOperationResult.Status">
            <summary>
            Overall operation status.
            </summary>
            <value>
            Values: "ok" or "error"
            </value>
        </member>
        <member name="P:C2LibraryBase.Implementation.HTTPOperationResult.ErrorText">
            <summary>
            Error text when the status returned by operation is "error". An empty string otherwise.
            </summary>
            <value>Empty or an error text.</value>
        </member>
        <member name="M:C2LibraryBase.Implementation.IQFeedSymbology.findFutureRoot(System.String)">
            <summary>
            Finds the future root. Usable only for symbols having 2 years digits!
            Original perl procedure works with Collective2 symbols having 1 year digit.
            </summary>
            <param name="symbol">The symbol.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:C2LibraryBase.Implementation.IQFeedSymbology.isLondonExchangeSymbol(System.String)" -->
        <member name="T:C2LibraryBase.Implementation.OHLCExtension">
            <summary>
            En extension method of the OHLC class.
            </summary>
        </member>
        <member name="M:C2LibraryBase.Implementation.OHLCExtension.Copy(C2LibraryBase.Implementation.EquityOHLC)">
            <summary>
            Creates a copy of the OHLC object.
            </summary>
            <param name="source">The source object.</param>
            <returns>OHLC object</returns>
        </member>
        <member name="T:C2LibraryBase.Implementation.EquityOHLC">
            <inheritdoc cref="!:C2ExplorerServiceStack.Logic.Interfaces.IOHLC"/>
        </member>
        <member name="P:C2LibraryBase.Implementation.EquityOHLC.DateTime">
            <inheritdoc/>
        </member>
        <member name="P:C2LibraryBase.Implementation.EquityOHLC.Open">
            <inheritdoc/>
        </member>
        <member name="P:C2LibraryBase.Implementation.EquityOHLC.High">
            <inheritdoc/>
        </member>
        <member name="P:C2LibraryBase.Implementation.EquityOHLC.Low">
            <inheritdoc/>
        </member>
        <member name="P:C2LibraryBase.Implementation.EquityOHLC.Close">
            <inheritdoc/>
        </member>
        <member name="T:C2LibraryBase.Implementation.ResampleEquity">
            <summary>
            Converts an equity data from the C2 data to the daily OHLC data
            </summary>
        </member>
        <member name="M:C2LibraryBase.Implementation.ResampleEquity.Execute(System.Collections.Generic.IEnumerable{C2LibraryBase.Interfaces.ITimeSeriesPoint})">
            <summary>
            Executes the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns>OHLC data</returns>
        </member>
        <member name="T:C2LibraryBase.Implementation.SignalsSeriesKey">
            <summary>
            A key for signals series.
            We need a subkey which differentiates DateTime which is not unique sometimes.
            The subkey is SignalID.
            </summary>
        </member>
        <member name="P:C2LibraryBase.Implementation.SignalsSeriesKey.Tag">
            <summary>
            General purposes tag.
            </summary>
        </member>
        <member name="M:C2LibraryBase.Implementation.SignalsSeriesKey.#ctor(System.DateTime,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:C2LibraryBase.Implementation.SignalsSeriesKey"/> class.
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="id">The identifier.</param>
        </member>
        <member name="P:C2LibraryBase.Implementation.Symbol.Ticker">
            <summary>
            Gets the ticker in the IQFeed format:  EURUSD.FXCM
            </summary>
            <value>
            The IQFeed symbol.
            </value>
        </member>
        <member name="P:C2LibraryBase.Implementation.Symbol.UITicker">
            <summary>
            Gets a ticker for user interface: EURUSD
            </summary>
            <value>
            The UI ticker.
            </value>
        </member>
        <member name="M:C2LibraryBase.Implementation.SymbolsUtils.CreateTableName(System.String)">
            <summary>
            Creates the name of the table.
            </summary>
            <param name="symbol">The symbol.</param>
            <remarks>MySQL max table name length is 64.</remarks>
            <returns></returns>
        </member>
        <member name="M:C2LibraryBase.Implementation.SymbolsUtils.IQFeedSymbolConversion(System.String,C2LibraryBase.Enumeration.Market)">
            <summary>
            Convert a symbol to the IQFeed symbology. Currently TSX (to C.XY) and  LSE (and L.XY)
            </summary>
            <param name="symbol"></param>
            <param name="market"></param>
            <returns></returns>
        </member>
        <member name="T:C2LibraryBase.Implementation.TimeSeriesPoint">
            <summary>
            This class implements ITimeSeriesPoint.
            </summary>
        </member>
        <member name="P:C2LibraryBase.Implementation.TimeSeriesPoint.DateTime">
            <summary>
            Gets or sets the date and time.
            </summary>
            <value>
            The date and time.
            </value>
        </member>
        <member name="P:C2LibraryBase.Implementation.TimeSeriesPoint.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:C2LibraryBase.Implementation.TimeSeriesUtils.Multiply``1(Deedle.Series{``0,System.Decimal},Deedle.Series{``0,System.Decimal})">
            <summary>
            Multiplies decimal series supposing theres are no missing values and series have the same length.
            </summary>
        </member>
        <member name="M:C2LibraryBase.Implementation.TimeSeriesUtils.Divide``1(Deedle.Series{``0,System.Decimal},Deedle.Series{``0,System.Decimal})">
            <summary>
            Divides decimal series supposing theres are no missing values and series have the same length.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:C2LibraryBase.Implementation.TimeSeriesUtils.CumProd``1(Deedle.Series{``0,System.Double})">
            <summary>
            Cumulative product.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:C2LibraryBase.Implementation.TimeSeriesUtils.CumSum(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Cumulative product.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:C2LibraryBase.Implementation.TimeSeriesUtils.CumProd(Deedle.Series{C2LibraryBase.Implementation.HLKey,System.Double})">
            <summary>
            Cumulative product.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="T:C2LibraryBase.Implementation.TradeEquityKey">
            <summary>
            A key for trade High/Low.
            We need a row nomber to be able to find High/Low prices (not postion open equity values) in the equity.
            The subkey is Index.
            </summary>
        </member>
        <member name="T:C2LibraryBase.Enumeration.C2InstrumentType">
            <summary>
            Used in config for aggregation and Ask/Bid stream filtering setups.
            </summary>
        </member>
        <member name="T:C2LibraryBase.Enumeration.CommissionsMode">
            <summary>
            Commisions definition. Constants are defined in the Seetu/Amibroker.
            CommissionMode:  
               0 - use portfolio manager commission table 
               1 - percent of trade 
               2 - $ per trade 
               3 - $ per share/contract 
            </summary>
        </member>
        <member name="F:C2LibraryBase.Enumeration.Pyramiding.ScaleIn">
            <summary>
            Amibroker: All you have to do to implement pyraminding is to:
            - Assign sigScaleIn to BUY/SHORT variable if you want to scale-in (increase size of) LONG/SHORT position
            - Assign sigScaleOut to BUY/SHORT variable if you want to scale-out (decrease size of) LONG/SHORT position
            Scaling size is defined by PositionSize variable which in case of scaling defines not absolute positionsize but dollar increase or decrease.
            </summary>
        </member>
        <member name="F:C2LibraryBase.Enumeration.Pyramiding.ScaleOut">
            <summary>
            Amibroker: All you have to do to implement pyraminding is to:
            - Assign sigScaleIn to BUY/SHORT variable if you want to scale-in (increase size of) LONG/SHORT position
            - Assign sigScaleOut to BUY/SHORT variable if you want to scale-out (decrease size of) LONG/SHORT position
            Scaling size is defined by PositionSize variable which in case of scaling defines not absolute positionsize but dollar increase or decrease.
            </summary>
        </member>
        <member name="T:C2LibraryBase.Exceptions.IQFeedException">
            <summary>
            IQFeed - unauthorized account
            </summary>
        </member>
        <member name="T:C2LibraryBase.Interfaces.C2SeriesExtension">
            <summary>
            Collective2 extensions for Deedle.Series.
            </summary>
        </member>
        <member name="M:C2LibraryBase.Interfaces.C2SeriesExtension.AsDecimals(Deedle.Series{System.DateTime,System.Double})">
            <summary>
            Converts Series&lt;DateTime, double> to Series&lt;DateTime, decimal>
            </summary>
            <param name="series">Series&lt;DateTime, double> series</param>
            <returns>Series&lt;DateTime, decimal></returns>
        </member>
        <member name="M:C2LibraryBase.Interfaces.C2SeriesExtension.AsDoubles(Deedle.Series{System.DateTime,System.Decimal})">
            <summary>
            Converts Series&lt;DateTime, decimal> to  Series&lt;DateTime, double>
            </summary>
            <param name="series">Series&lt;DateTime, decimal> series</param>
            <returns>Series&lt;DateTime, double></returns>
        </member>
        <member name="M:C2LibraryBase.Interfaces.C2SeriesExtension.ToTable(Deedle.Series{System.DateTime,System.Double})">
            <summary>
            Converts Series&lt;DateTime, double> to IEnumerableSeries&lt;ITimeSeriesPoint> which is accepted by TABLE.
            </summary>
            <param name="series">Series&lt;DateTime, double></param>
            <returns>IEnumerable&lt;ITimeSeriesPoint></returns>
        </member>
        <member name="M:C2LibraryBase.Interfaces.C2SeriesExtension.ToTable(Deedle.Series{System.DateTime,System.Decimal})">
            <summary>
            Converts Series&lt;DateTime, decimal> to IEnumerable&lt;ITimeSeriesPointDecimal> which is accepted by TABLE.
            </summary>
            <param name="series">Series&lt;DateTime, decimal></param>
            <returns>IEnumerable&lt;ITimeSeriesPointDecimal></returns>
        </member>
        <member name="M:C2LibraryBase.Interfaces.C2SeriesExtension.ToTableDecimal(Deedle.Series{System.DateTime,System.Double},System.Int32)">
            <summary>
            Converts Series&lt;DateTime, decimal&gt; to IEnumerable&lt;ITimeSeriesPointDecimal&gt; which is accepted by TABLE.
            </summary>
            <param name="series">Series&lt;DateTime, double&gt;</param>
            <param name="decimals">Decimal positions.</param>
            <returns>
            IEnumerable&lt;ITimeSeriesPointDecimal&gt;
            </returns>
        </member>
        <member name="T:C2LibraryBase.Interfaces.IEquityOHLC">
            <summary>
            OHLC data
            </summary>
        </member>
        <member name="P:C2LibraryBase.Interfaces.IEquityOHLC.DateTime">
            <summary>
            Gets or sets the date time.
            </summary>
            <value>
            The date time.
            </value>
        </member>
        <member name="P:C2LibraryBase.Interfaces.IEquityOHLC.Open">
            <summary>
            Gets or sets the Open.
            </summary>
            <value>
            The Open.
            </value>
        </member>
        <member name="P:C2LibraryBase.Interfaces.IEquityOHLC.High">
            <summary>
            Gets or sets the High.
            </summary>
            <value>
            The High.
            </value>
        </member>
        <member name="P:C2LibraryBase.Interfaces.IEquityOHLC.Low">
            <summary>
            Gets or sets the Low.
            </summary>
            <value>
            The Low.
            </value>
        </member>
        <member name="P:C2LibraryBase.Interfaces.IEquityOHLC.Close">
            <summary>
            Gets or sets the Close.
            </summary>
            <value>
            The Close.
            </value>
        </member>
        <member name="T:C2LibraryBase.Interfaces.IPartialTrade">
            <exclude/>
        </member>
        <member name="P:C2LibraryBase.Interfaces.IPartialTrade.AvgPrice">
            <exclude/>
        </member>
        <member name="T:C2LibraryBase.Interfaces.ITimeSeriesPoint">
            <summary>
            Simple object used instead of Deedle.Series. 
            </summary>
            <remarks>The value type is Double.</remarks>
        </member>
        <member name="P:C2LibraryBase.Interfaces.ITimeSeriesPoint.DateTime">
            <summary>
            Gets or sets the date and time.
            </summary>
            <value>
            The date and time.
            </value>
        </member>
        <member name="P:C2LibraryBase.Interfaces.ITimeSeriesPoint.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:C2LibraryBase.Interfaces.ITimeSeriesPointDecimal">
            <summary>
            Simple object used instead of Deedle.Series. 
            </summary>
            <remarks>The value type is Decimal.</remarks>
        </member>
        <member name="P:C2LibraryBase.Interfaces.ITimeSeriesPointDecimal.DateTime">
            <summary>
            Gets or sets the date and time.
            </summary>
            <value>
            The date and time.
            </value>
        </member>
        <member name="P:C2LibraryBase.Interfaces.ITimeSeriesPointDecimal.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:C2LibraryBase.Interfaces.ITrade">
            <exclude/>
        </member>
        <member name="P:C2LibraryBase.Interfaces.ITrade.Action">
            <exclude/>
        </member>
        <member name="P:C2LibraryBase.Interfaces.ITrade.CloseSignalId">
            <exclude/>
        </member>
        <member name="P:C2LibraryBase.Interfaces.ITrade.EntryTime">
            <exclude/>
        </member>
        <member name="P:C2LibraryBase.Interfaces.ITrade.ExitTime">
            <exclude/>
        </member>
        <member name="P:C2LibraryBase.Interfaces.ITrade.Id">
            <exclude/>
        </member>
        <member name="P:C2LibraryBase.Interfaces.ITrade.OpenQuant">
            <exclude/>
        </member>
        <member name="P:C2LibraryBase.Interfaces.ITrade.OpenSignalId">
            <exclude/>
        </member>
        <member name="P:C2LibraryBase.Interfaces.ITrade.PointValue">
            <exclude/>
        </member>
        <member name="P:C2LibraryBase.Interfaces.ITrade.Symbol">
            <exclude/>
        </member>
        <member name="P:C2LibraryBase.Interfaces.ITrade.Result">
            <exclude/>
        </member>
        <member name="P:C2LibraryBase.Interfaces.ITrade.Instrument">
            <exclude/>
        </member>
        <member name="T:C2LibraryBase.Interfaces.UserCodeResultType">
            <summary>
            Types of widgets.
            </summary>
            <exclude/>
        </member>
        <member name="T:C2LibraryBase.Interfaces.IUserCodeResult">
            <summary>
            A type of data sent to the JavaScript front end.
            </summary>
            <exclude/>
        </member>
        <member name="T:C2LibraryBase.Interfaces.IUserCodeResults">
            <summary>
            A list of data types sent to the JavaScript front end.
            </summary>
            <exclude/>
        </member>
    </members>
</doc>
